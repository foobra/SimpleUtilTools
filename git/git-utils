#!/bin/sh

# git pull branch -> user_branch
# $1 : git pull $1 branch ->current_branch
function gl () {
    now_pwd=`pwd`
    while [[ ! -d ".git" && ! -f ".git" ]]
    do
        cd ..
        if [[ `pwd` = '/' ]]
        then
            echo 'Here is Root, Damn! Let us go back, biu~~'
            cd ${now_pwd}
            return
        fi
    done
    setup_git_pre_commit_hooks
    # if [ -e .gitmodules ]
    # then
    #     git submodule update --init --recursive
    #     git submodule foreach --recursive git checkout master
    #     git submodule foreach --recursive git pull
    # fi

    if [[ -n `git status -s` ]]; then
        echo "git status not clean, please commit first"
        return
    fi

    if [ -n "$1" ]; then
        head=`cat .git/HEAD`
        current_head=`echo $head | cut -b 17-`
        git fetch origin
        git merge $current_head origin/$1
    else
        head=`cat .git/HEAD`
        current_head=`echo $head | cut -b 17-`
        user=${current_head%%_*}
        if [[ $current_head = *_* ]]
        then
            branch=${current_head%%+*}
            branch=${branch#*_}
            user_branch="${user}_${branch}"
            git fetch origin
            git merge $user_branch origin/$user_branch
            git merge $user_branch origin/$branch
            if [[ $current_head = *+* ]]
            then
                git merge $current_head origin/${user_branch}
                git merge $current_head origin/$current_head
                git merge $current_head $user_branch
            fi
        else
            echo "you are not in your own branch"
            return
        fi
    fi
}

# private function
function rev2() {
    declare input=${*:-$(</dev/stdin)}
    reverse=""

    len=${#input}
    for (( i=$len-1; i>=0; i-- ))
    do
        reverse="$reverse${input:$i:1}"
    done
    echo ${reverse}
    # return $reverse
}

# git push user_branch and create merge request user_branch to branch
# $1 : git push current branch and create merge request current branch to $1 branch
function gh () {
    now_pwd=`pwd`
    while [[ ! -d ".git" && ! -f ".git" ]]
    do
        cd ..
        if [[ `pwd` = '/' ]]
        then
            echo 'Here is Root, Damn! Let us go back, biu~~'
            cd ${now_pwd}
            return
        fi
    done

    setup_git_pre_commit_hooks


    if [[ -n `git status -s` ]]; then
        echo "git status not clean, please commit first"
        return
    fi
    
    src_branch=""
    dst_branch=""
    if [ -n "$1" ]; then
       head=`cat .git/HEAD`
       current_head=`echo $head | cut -b 17-`
       git fetch origin
       git push origin $current_head
       src_branch=${current_head}
       dst_branch=$1
    else
        head=`cat .git/HEAD`
        current_head=`echo $head | cut -b 17-`
        user=${current_head%%_*}
        if [[ $current_head = *_* ]]
        then
            branch=${current_head%%+*}
            branch=${branch#*_}
            user_branch="${user}_${branch}"
            git fetch origin
            git merge $user_branch origin/$user_branch
            git merge $user_branch origin/$branch
            if [[ $current_head = *+* ]]
            then
                git push origin $user_branch
                git fetch origin
                git checkout $current_head
                git merge origin/${user_branch}
                git merge $current_head origin/$current_head
                git push origin $current_head
            else
                git push origin $user_branch
            fi
            src_branch=${user_branch}
            dst_branch=${branch}
        else
            echo "you are not in your own branch"
            return
        fi
    fi

    origin_url=`git config remote.origin.url`
    git_ip=""
    git_path=""
    url=""
    if [[ $origin_url =~ "http" ]]
    then
        git_ip=`git config remote.origin.url | cut -d "/" -f2,3 | cut -c 2-`
        git_path=`git config remote.origin.url | cut -d "/" -f4,5 | cut -d "." -f 1`
        url='https://'$git_ip'/'$git_path'/merge_requests/new?merge_request[source_branch]='$src_branch'&merge_request[target_branch]='$dst_branch
    else
        git_ip=`git config remote.origin.url | grep -e '\([0-9]\+\.\)\{3\}[0-9]\+' -o`
        git_path1=`git config remote.origin.url | sed 's/ssh\:\/\///g' |  rev2 | cut -d "/" -f2 | rev2 | cut -d ":" -f2`
        git_path2=`git config remote.origin.url | sed 's/ssh\:\/\///g' | cut -d ":" -f2 | rev2 | cut -d "/" -f1 | rev2 | cut -d "." -f1`
        url='https://'$git_ip'/'$git_path1'/'$git_path2'/merge_requests/new?merge_request[source_branch]='$src_branch'&merge_request[target_branch]='$dst_branch
    fi

    if [[ -x "$(command -v xdg-open)" ]]
    then
        xdg-open $url
        return 0
    fi

    if [[ -x "$(command -v open)" ]]
    then
        open $url
        return 0
    fi

    if [[ -x "$(command -v start)" ]]
    then
        start $url
        return 0
    fi
}

function gnb () {
    pkill Xcode || true
    default_branch=''

    if [ -z "$1" ]; then
        echo "Usage: gnb branchName"
        return
    fi

    default_branch=$1

    # if [[ $1 == *_* ]]; then
    #     echo "Usage: defaultBranch name should not include _"
    #     # return
    #   else
    #     default_branch=$1
    #   fi
    # fi

   now_pwd=`pwd`
    while [[ ! -d ".git" && ! -f ".git" ]]; do
    cd ..
    if [[ `pwd` = '/' ]]; then
        echo 'Here is Root, Damn! Let us go back, biu~~'
        cd ${now_pwd}
        return
    fi
    done


    user=`git config --get user.name`
    user_branch="${user}_$default_branch"

    git remote prune origin
    git fetch origin
    git fetch --tags

    if [ -f ".git/refs/remotes/origin/$default_branch" ]; then
        echo "Remote has ${default_branch}"
        # 远程有服务器分支
        git checkout $default_branch
        git branch --set-upstream-to=origin/$default_branch
        git merge origin/${default_branch}
        git push origin ${default_branch}
    else
        echo "Remote don't have ${default_branch}"
        # 服务器没有这个分支
        git checkout -b $default_branch
        git push origin ${default_branch}
        git branch --set-upstream-to=origin/$default_branch
    fi


    if [ -f ".git/refs/remotes/origin/$user_branch" ]; then
        echo "Remote has ${user_branch}"
        # 远程有服务器分支
        git checkout $user_branch
        git branch --set-upstream-to=origin/$user_branch
        git merge origin/${user_branch}
        git push origin ${user_branch}
    else
        echo "Remote don't have ${user_branch}"
        # 服务器没有这个分支
        git checkout -b $user_branch
        git push origin ${user_branch}
        git branch --set-upstream-to=origin/$user_branch
    fi
    gl
}

function gcd () {
    now_pwd=`pwd`
    while [[ ! -d ".git" && ! -f ".git" ]]
    do
        cd ..
        if [[ `pwd` = '/' ]]
        then
            echo 'Here is Root, Damn! Let us go back, biu~~'
            cd ${now_pwd}
            return
        fi
    done
    head=`cat .git/HEAD`
    user=`git config --get user.name`
    if [[ $head = *_* ]]
    then
        echo "you have already switched to your own branch"
    else
        branch=`echo $head | cut -b 17-`

        if [[ -z "$1" ]]
        then
            user_branch="${user}_${branch}"
        else
            user_branch="${user}_${branch}+$1"
        fi
        git checkout $user_branch
    fi
}

function gdc() {
    now_pwd=`pwd`
    while [[ ! -d ".git" && ! -f ".git" ]];do
        cd ..
        if [[ `pwd` == '/' ]]; then
            echo 'Here is Root, Damn! Let us go back, biu~~'
            cd ${now_pwd}
            return
        fi
    done;
    head=`cat .git/HEAD`

    current_head=`echo $head | cut -b 17-`


    user=${current_head%%_*}

    if [[ $current_head == *_* ]]; then
        if [[ $current_head == *+* ]]; then
            branch=${current_head%%+*}
        elif [[ $current_head == *-* ]]; then
            branch=${current_head##*_}
        else
            branch=${current_head##*_}
        fi
        git checkout $branch
    else
        default_branch=''
        if [ -z "$1" ]; then
          default_branch=`git remote show origin | grep "HEAD branch" | cut -d : -f2 | cut -c 2-`
        else
          default_branch=$1
        fi
        git checkout $default_branch
    fi
}

function gmergepr() {
    now_pwd=`pwd`
    while [[ ! -d ".git" || -f ".git" ]];do
        cd ..
        if [[ `pwd` == '/' ]]; then
            echo 'Here is Root, Damn! Let us go back, biu~~'
            cd ${now_pwd}
            return
        fi
    done;
    setup_git_pre_commit_hooks


    current_head=`git branch | grep -e "^*" | cut -d' ' -f 2`
    current_head2="${current_head}"
    merged_head="${current_head}"
    if [ ! -z "$1" ]; then
        echo "automaticly merge $1"
        merged_head="$1"
    fi

    if [[ ! $merged_head == *_* ]]; then
        echo "Merge branch must be xx_yy, not $merged_head"
        return;
    fi


    if [[ ! -z $(git status -uno --porcelain) ]];then
        git add -u .
        git stash
        git checkout $merged_head && gl && gdc && git merge - && git push && git checkout - && git push && git checkout $current_head2
        git stash apply
    else
        git checkout $merged_head && gl && gdc && git merge - && git push && git checkout - && git push && git checkout $current_head2
    fi
}

function gci() {
    git add .
    git add -u
    git commit -m "$*"
}

# function gvpn() {
#     origin_url=`git config remote.origin.url`
#     if [[ $origin_url =~ "http" ]]
#     then
#         git_path=`git config remote.origin.url | cut -d "/" -f4,5 | cut -d "." -f 1`
#         git remote set-url origin 'http://10.148.68.13/'$git_path
#     else
#         git_ip=`git config remote.origin.url | grep -e '\([0-9]\+\.\)\{3\}[0-9]\+' -o`
#         git_path1=`git config remote.origin.url | sed 's/ssh\:\/\///g' | rev2 | cut -d "/" -f2 | rev2 | cut -d ":" -f2`
#         git_path2=`git config remote.origin.url | sed 's/ssh\:\/\///g' | cut -d ":" -f2 | rev2 | cut -d "/" -f1 | rev2 | cut -d "." -f1`
#         git remote set-url origin 'ssh://git@10.148.91.3:2222/'$git_path1'/'$git_path2'.git'
#     fi
# }


# function glocal() {
#     origin_url=`git config remote.origin.url`
#     if [[ $origin_url =~ "http" ]]
#     then
#         git_path=`git config remote.origin.url | cut -d "/" -f4,5 | cut -d "." -f 1`
#         git remote set-url origin 'http://172.20.92.28/'$git_path
#     else
#         git_ip=`git config remote.origin.url | grep -e '\([0-9]\+\.\)\{3\}[0-9]\+' -o`
#         git_path1=`git config remote.origin.url | sed 's/ssh\:\/\///g' |  rev2 | cut -d "/" -f2 | rev2 | cut -d ":" -f2`
#         git_path2=`git config remote.origin.url | sed 's/ssh\:\/\///g' | cut -d ":" -f2 | rev2 | cut -d "/" -f1 | rev2 | cut -d "." -f1`
#         git remote set-url origin 'ssh://git@10.148.91.4:2222/'$git_path1'/'$git_path2'.git'
#     fi
# }



function setup_git_pre_commit_hooks() {
    if [[ -f .init-version ]]; then
        NEW_VERSION=`cat .init-version`
        OLD_VERSION=`cat .init-local-version`

        if [[ "$NEW_VERSION" != "$OLD_VERSION" ]];then
            sh init.sh
            echo "Re execute init.sh succeed!"
            echo $NEW_VERSION > .init-local-version
        fi
    fi


    mkdir -p .git/hooks || true
    if [[ ! -f .git/hooks/pre-commit && -f scripts/pre-commit/pre-commit.sh ]]; then
        echo "Copy Pre-Commit to hooks"
    fi

    if [[ -f scripts/pre-commit/pre-commit.sh ]]; then
        cp -f scripts/pre-commit/pre-commit.sh .git/hooks/pre-commit
        chmod +x .git/hooks/pre-commit
    fi
}


alias grst='(git merge --abort || true) && git reset . && git checkout . && git clean -df .'
alias gf='git diff'
alias gg='git log | less'
alias ga='git add . && git add -u'
alias gtci='git add . && git commit -m "Minor fixes"'
alias gs='git status'
alias sg='git status'
alias gp='git pull'
alias gu='git push'
alias gpu='git pull && git push'
